#Demonstration of how a generic Fourier Transform works 

max = 40
N = 200 
timestep = max/N 
x = np.linspace(-max, max, N)
sigma = 10 
y = np.exp(-(x)**2/2/sigma**2) * np.sin(x) 
#y = sp.signal.sawtooth(x)
#y = np. np.sin(x) 

plt.subplot(1, 2, 1)
plt.plot(x,y) 
plt.title('Time Domain')
plt.ylabel('$f(x)&') 
xf = np.fft.fftfreq(N, d=timestep) 
yf = np.fft.fft(y) 

plt.subplot(1, 2, 2)
plt.title('frequency domain')
plt.plot(xf, abs(yf))
                
          